#!/usr/bin/env python3
"""
Utilit√°rios para o projeto New Life Website
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime
import django
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')
django.setup()

def check_environment():
    """Verifica se o ambiente est√° configurado corretamente"""
    print("üîç Verificando ambiente...")
    
    # Verificar vari√°veis de ambiente cr√≠ticas
    critical_vars = ['SECRET_KEY', 'DEBUG']
    missing_vars = []
    
    for var in critical_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        return False
    
    # Verificar se o banco est√° acess√≠vel
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ Banco de dados acess√≠vel")
    except Exception as e:
        print(f"‚ùå Erro no banco de dados: {e}")
        return False
    
    # Verificar arquivos est√°ticos
    static_root = settings.STATIC_ROOT
    if not os.path.exists(static_root):
        print(f"‚ö†Ô∏è  Diret√≥rio de arquivos est√°ticos n√£o existe: {static_root}")
    else:
        print("‚úÖ Arquivos est√°ticos configurados")
    
    print("‚úÖ Ambiente verificado com sucesso!")
    return True

def backup_database():
    """Cria backup do banco de dados"""
    print("üíæ Criando backup do banco...")
    
    # Criar diret√≥rio de backup
    backup_dir = Path("backup")
    backup_dir.mkdir(exist_ok=True)
    
    # Nome do arquivo de backup
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"newlife_{timestamp}.json"
    
    try:
        # Exportar dados como JSON
        from django.core.management import call_command
        from io import StringIO
        
        output = StringIO()
        call_command('dumpdata', stdout=output, indent=2)
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(output.getvalue())
        
        print(f"‚úÖ Backup criado: {backup_file}")
        return str(backup_file)
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return None

def restore_database(backup_file):
    """Restaura backup do banco de dados"""
    print(f"üîÑ Restaurando backup: {backup_file}")
    
    if not os.path.exists(backup_file):
        print(f"‚ùå Arquivo de backup n√£o encontrado: {backup_file}")
        return False
    
    try:
        from django.core.management import call_command
        
        # Limpar dados existentes
        call_command('flush', '--noinput')
        
        # Restaurar dados
        call_command('loaddata', backup_file)
        
        print("‚úÖ Backup restaurado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao restaurar backup: {e}")
        return False

def check_security():
    """Verifica configura√ß√µes de seguran√ßa"""
    print("üîí Verificando configura√ß√µes de seguran√ßa...")
    
    issues = []
    
    # Verificar DEBUG em produ√ß√£o
    if not settings.DEBUG and os.getenv('ENVIRONMENT') == 'production':
        print("‚úÖ DEBUG desabilitado em produ√ß√£o")
    elif settings.DEBUG and os.getenv('ENVIRONMENT') == 'production':
        issues.append("DEBUG habilitado em produ√ß√£o")
    
    # Verificar SECRET_KEY
    if len(settings.SECRET_KEY) < 50:
        issues.append("SECRET_KEY muito curta")
    else:
        print("‚úÖ SECRET_KEY adequada")
    
    # Verificar configura√ß√µes SSL
    if hasattr(settings, 'SECURE_SSL_REDIRECT') and settings.SECURE_SSL_REDIRECT:
        print("‚úÖ SSL redirecionamento habilitado")
    else:
        issues.append("SSL redirecionamento desabilitado")
    
    if issues:
        print(f"‚ö†Ô∏è  Problemas de seguran√ßa encontrados: {', '.join(issues)}")
        return False
    else:
        print("‚úÖ Configura√ß√µes de seguran√ßa adequadas")
        return True

def optimize_static_files():
    """Otimiza arquivos est√°ticos"""
    print("üì¶ Otimizando arquivos est√°ticos...")
    
    try:
        from django.core.management import call_command
        
        # Coletar arquivos est√°ticos
        call_command('collectstatic', '--noinput', '--clear')
        
        # Comprimir arquivos CSS/JS (se django-compressor estiver instalado)
        try:
            call_command('compress', '--force')
            print("‚úÖ Arquivos est√°ticos comprimidos")
        except:
            print("‚ÑπÔ∏è  django-compressor n√£o instalado, pulando compress√£o")
        
        print("‚úÖ Arquivos est√°ticos otimizados!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao otimizar arquivos est√°ticos: {e}")
        return False

def generate_sitemap():
    """Gera sitemap do site"""
    print("üó∫Ô∏è  Gerando sitemap...")
    
    try:
        from django.core.management import call_command
        call_command('generate_sitemap')
        print("‚úÖ Sitemap gerado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao gerar sitemap: {e}")
        return False

def check_permissions():
    """Verifica permiss√µes de arquivos"""
    print("üîê Verificando permiss√µes...")
    
    critical_files = [
        'manage.py',
        'setup/settings.py',
        '.env'
    ]
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            mode = oct(os.stat(file_path).st_mode)[-3:]
            if mode != '644' and file_path != '.env':
                print(f"‚ö†Ô∏è  Permiss√£o inadequada para {file_path}: {mode}")
            else:
                print(f"‚úÖ {file_path}: {mode}")
    
    # Verificar .env (deve ser 600)
    if os.path.exists('.env'):
        mode = oct(os.stat('.env').st_mode)[-3:]
        if mode != '600':
            print(f"‚ö†Ô∏è  .env deve ter permiss√£o 600, atual: {mode}")
        else:
            print("‚úÖ .env: 600")

def run_tests():
    """Executa testes do projeto"""
    print("üß™ Executando testes...")
    
    try:
        result = subprocess.run([
            sys.executable, 'manage.py', 'test', '--verbosity=2'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Todos os testes passaram!")
            return True
        else:
            print(f"‚ùå Testes falharam:\n{result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao executar testes: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2:
        print("Uso: python scripts/utils.py [comando]")
        print("Comandos dispon√≠veis:")
        print("  check-env     - Verifica ambiente")
        print("  backup        - Cria backup do banco")
        print("  restore [file]- Restaura backup")
        print("  security      - Verifica seguran√ßa")
        print("  optimize      - Otimiza arquivos est√°ticos")
        print("  sitemap       - Gera sitemap")
        print("  permissions   - Verifica permiss√µes")
        print("  test          - Executa testes")
        return
    
    command = sys.argv[1]
    
    if command == 'check-env':
        check_environment()
    elif command == 'backup':
        backup_database()
    elif command == 'restore':
        if len(sys.argv) < 3:
            print("‚ùå Arquivo de backup n√£o especificado")
            return
        restore_database(sys.argv[2])
    elif command == 'security':
        check_security()
    elif command == 'optimize':
        optimize_static_files()
    elif command == 'sitemap':
        generate_sitemap()
    elif command == 'permissions':
        check_permissions()
    elif command == 'test':
        run_tests()
    else:
        print(f"‚ùå Comando desconhecido: {command}")

if __name__ == '__main__':
    main()
